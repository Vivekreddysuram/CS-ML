# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ISonZjdMf0wWsP54QD8F8OH0RJSyA7Ou
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
from sklearn.datasets import load_iris, fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.metrics import silhouette_score, adjusted_rand_score
import time

def load_iris_dataset():
    iris = load_iris()
    return iris.data, iris.target

def load_mnist_subset(size=1000, random_state=42):
    mnist = fetch_openml('mnist_784', version=1, as_frame=False, parser='auto')
    data_subset, _, target_subset, _ = train_test_split(
        mnist.data, mnist.target, train_size=size, stratify=mnist.target, random_state=random_state)
    return data_subset, target_subset.astype(int)


def cluster_kmeans_performance(data, n_clusters=3, random_state=42):
    start_time = time.time()
    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=10)
    labels = kmeans.fit_predict(data)
    end_time = time.time()
    sse = kmeans.inertia_
    silhouette = silhouette_score(data, labels)
    print(f"K-means (k={n_clusters}): SSE={sse}, Silhouette={silhouette}, Time={(end_time - start_time):.2f}s")
    return labels

def cluster_hierarchical_scipy_performance(data, n_clusters=3, method='ward'):
    start_time = time.time()
    Z = linkage(data, method=method)
    labels = fcluster(Z, n_clusters, criterion='maxclust')
    end_time = time.time()
    silhouette = silhouette_score(data, labels)
    print(f"Hierarchical clustering with SciPy ({method} linkage): Silhouette={silhouette}, Time={(end_time - start_time):.2f}s")
    dendrogram(Z)
    plt.show()
    return labels

def cluster_hierarchical_sklearn_performance(data, n_clusters=3, linkage='ward'):
    start_time = time.time()
    model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage)
    labels = model.fit_predict(data)
    end_time = time.time()
    silhouette = silhouette_score(data, labels)
    print(f"Agglomerative Clustering (n_clusters={n_clusters}, linkage={linkage}): Silhouette={silhouette}, Time={(end_time - start_time):.2f}s")
    return labels

def elbow_method_performance(data, true_labels, start_k=2, end_k=11, random_state=42):
    sses = []
    silhouettes = []
    aris = []
    for k in range(start_k, end_k):
        start_time = time.time()
        kmeanModel = KMeans(n_clusters=k, random_state=random_state, n_init=10)
        labels = kmeanModel.fit_predict(data)
        end_time = time.time()
        sse = kmeanModel.inertia_
        silhouette = silhouette_score(data, labels)
        ari = adjusted_rand_score(true_labels, labels)
        sses.append(sse)
        silhouettes.append(silhouette)
        aris.append(ari)
        print(f"K={k}, SSE={sse:.2f}, Silhouette Score={silhouette:.2f}, ARI={ari:.2f}, Time={(end_time - start_time):.2f}s")

    plt.plot(range(start_k, end_k), sses, 'bx-')
    plt.xlabel('k')
    plt.ylabel('SSE')
    plt.title('The Elbow Method showing the optimal k')
    plt.show()


if __name__ == "__main__":

    print("Starting Iris Dataset Analysis:")
    iris_data, iris_labels = load_iris_dataset()
    elbow_method_performance(iris_data, iris_labels)
    kmeans_labels = cluster_kmeans_performance(iris_data)
    hierarchical_labels = cluster_hierarchical_scipy_performance(iris_data)
    hierarchical_sklearn_labels = cluster_hierarchical_sklearn_performance(iris_data)


    print("\nStarting MNIST Dataset Subset Analysis:")
    mnist_data_subset, mnist_labels_subset = load_mnist_subset(size=1000)
    elbow_method_performance(mnist_data_subset, mnist_labels_subset)
    kmeans_labels_mnist = cluster_kmeans_performance(mnist_data_subset)
    hierarchical_labels_mnist = cluster_hierarchical_scipy_performance(mnist_data_subset)
    hierarchical_sklearn_labels_mnist = cluster_hierarchical_sklearn_performance(mnist_data_subset)